CREATE
OR REPLACE PROCEDURE addChild (
    full_name VARCHAR2,
    parent_name VARCHAR2,
    c_dob DATE,
    e_contact CONTACT,
    wlist_id INTEGER,
    ccs_pctge NUMBER
) AS
    name_first VARCHAR2(25);
    name_last VARCHAR2(25);
    prnt_id INTEGER;
BEGIN
    -- Parse full name string to first and last names
    name_first := SUBSTR(full_name, 1, INSTR(full_name,' ')-1);
    name_last := SUBSTR(full_name, INSTR(full_name,' ')+1);


    -- Get parent ID from name
    SELECT "PARENT_ID" INTO prnt_id
    FROM "PARENT"
    WHERE ("FIRST_NAME" || ' ' || "LAST_NAME") = parent_name;
    
    -- Insert into database
    INSERT INTO
    "CHILD"(PARENT_ID, FIRST_NAME, LAST_NAME, DOB, EMERGENCY_CONTACT, WAITLIST_ID, CCS_PERCENTAGE)
    VALUES
        (prnt_id, name_first, name_last, c_dob, e_contact, wlist_id, ccs_pctge);
    COMMIT;
    -- Handle exceptions
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Parent ID not found');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END addChild;
/

-- Implementation examples
/*
BEGIN
    addChild('Melody Pond', 'Mackenzie Wilson', '09-DEC-2022',
        CONTACT('Steve', 'Jobs',  '0400 325 397',
        ADDR_OBJ(18, 'Nobbs Lane', 'Surry Hills', 'NSW', 2310), 
        'Lincoln46@hotmail.com'), NULL, 0);
END;
/
*/
CREATE
OR REPLACE PROCEDURE addClass (
    roomName VARCHAR2,
    class_sessions SESSIONS
) AS
    r_id INTEGER;
BEGIN
    -- get class ID from name
    SELECT "ROOM_ID" INTO r_id
    FROM "ROOM"
    WHERE "NAME" = roomName;

    FOR i IN 1..class_sessions.COUNT LOOP
        BEGIN
            INSERT INTO "CLASS"(CLASS_NAME, ROOM_ID)
            VALUES (class_sessions(i), r_id);
        EXCEPTION
            WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        END;
    END LOOP;
    COMMIT;

END;
/
-- Implementation Examples
/*
BEGIN
    addClass('TassieDevil1', SESSIONS('M7A', 'M9A', 'M12P', 'T7A', 'T9A', 'T12P', 'T3P', 'W9A', 'W12P', 'W3P'));
END;
/
*/
CREATE
OR REPLACE PROCEDURE addEmployee (
    full_name VARCHAR2,
    date_hire DATE, 
    emp_addr ADDR_OBJ,
    emp_email VARCHAR2, 
    ph_num VARCHAR2
) AS
    name_first VARCHAR2(25);
    name_last VARCHAR2(25);
    emp_id INTEGER;
BEGIN
    -- Parse full name string to first and last names
    name_first := SUBSTR(full_name, 1, INSTR(full_name,' ')-1);
    name_last := SUBSTR(full_name, INSTR(full_name,' ')+1);

    -- Check if employee with that name already exists
    SELECT "EMPLOYEE_ID" INTO emp_id
    FROM "EMPLOYEE"
    WHERE "FIRST_NAME" = name_first AND
     "LAST_NAME" = name_last;
    DBMS_OUTPUT.PUT_LINE('Employee already exists in database');
    
    -- Insert into database otherwise (ID generated by default value seq)
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO
        "EMPLOYEE"(FIRST_NAME, LAST_NAME, HIRE_DATE, ADDRESS, EMAIL, CONTACT_NUMBER)
        VALUES
            (name_first, name_last, date_hire, emp_addr, emp_email, ph_num);
        COMMIT;

    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END addEmployee;
/

-- Implementation Examples
/*
BEGIN
    addEmployee('James Stevens', '11-AUG-2020', ADDR_OBJ(21, 'Chalmers Lane', 'Devonport', 'TAS', 7310), 'Savannah20@gmail.com', '+61 488 151 232');
    addEmployee('John Apple', '01-DEC-2023', ADDR_OBJ(9, 'Meadow Street', 'Devonport', 'TAS', 7310), 'Madeline97@yahoo.com', '06 0039 5419');
END;
/
*/
CREATE
OR REPLACE PROCEDURE addParent (
    full_name VARCHAR2,
    prnt_addr ADDR_OBJ,
    prnt_email VARCHAR2,
    ph_num VARCHAR2,
    prnt_type VARCHAR2
) AS
    name_first VARCHAR2(25);
    name_last VARCHAR2(25);
    prnt_id INTEGER;
    prnt_type_id NUMBER(1);
BEGIN
    -- Parse full name string to first and last names
    name_first := SUBSTR(full_name, 1, INSTR(full_name,' ')-1);
    name_last := SUBSTR(full_name, INSTR(full_name,' ')+1);

    -- Derive parent type from string
    IF prnt_type = 'EMPLOYEE' THEN
      prnt_type_id := 1;
    ELSIF prnt_type = 'UNSW PHD' THEN
      prnt_type_id := 2;
    ELSIF prnt_type = 'UNSW STAFF' THEN
      prnt_type_id := 3;
    ELSIF prnt_type = 'UNSW PREV' THEN
      prnt_type_id := 4;
    ELSE
      prnt_type_id := NULL;
    END IF;

    -- Check if parent with that name already exists
    SELECT "PARENT_ID" INTO prnt_id
    FROM "PARENT"
    WHERE "FIRST_NAME" = name_first AND
     "LAST_NAME" = name_last;
    DBMS_OUTPUT.PUT_LINE('Parent already exists in database');
    
    -- Insert into database otherwise
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO
        "PARENT"(FIRST_NAME, LAST_NAME, ADDRESS, EMAIL, CONTACT_NUMBER, TYPE)
        VALUES
            (name_first, name_last, prnt_addr, prnt_email, ph_num, prnt_type_id);
        COMMIT;

    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END addParent;
/

-- Implementation Examples
/*
BEGIN
    addParent('Joe Mama', ADDR_OBJ(18, 'Nobbs Lane', 'Surry Hills', 'NSW', 2310), 'Lincoln46@hotmail.com', '0400 325 397', 'none');
END;
/
*/
CREATE
OR REPLACE PROCEDURE addRoom (
    room_name VARCHAR2,
    room_location VARCHAR2,
    room_capacity NUMBER,
    age_min NUMBER,
    age_max NUMBER
) AS
    r_id INTEGER;
BEGIN
    -- Check if room with that name already exists
    SELECT "ROOM_ID" INTO r_id
    FROM "ROOM"
    WHERE "NAME" = room_name;
    DBMS_OUTPUT.PUT_LINE('Room already exists in database');
    
    -- Insert into database otherwise
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO
        "ROOM"(NAME, LOCATION, MAX_CAPACITY, MIN_AGE, MAX_AGE)
        VALUES
            (room_name, room_location, room_capacity, age_min, age_max);
        COMMIT;

    -- Handle other exceptions
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END addRoom;
/

-- Implementation Examples
/*
BEGIN
    -- young kids
    addRoom('Koala1', 'North Wing', 10, 0, 1);
    addRoom('Koala2', 'North Wing', 10, 0, 1);
    addRoom('Koala3', 'North Wing', 13, 0, 1);
    addRoom('Koala4', 'North Wing', 13, 0, 1);
    -- young toddlers
    addRoom('TassieDevil1', 'South Wing', 10, 2, 3);
    addRoom('TassieDevil2', 'South Wing', 10, 2, 3);
    addRoom('TassieDevil3', 'South Wing', 13, 2, 3);
    addRoom('TassieDevil4', 'South Wing', 13, 2, 3);
    -- old toddlers
    addRoom('Wallaby1', 'West Wing', 6, 3, 4);
    addRoom('Wallaby2', 'West Wing', 8, 3, 4);
    addRoom('Wallaby3', 'West Wing', 10, 3, 4);
    addRoom('Wallaby4', 'West Wing', 4, 3, 4);
    --oldest
    addRoom('Kangaroo1', 'East Wing', 15, 5, 8);
    addRoom('Kangaroo2', 'East Wing', 12, 5, 8);
    addRoom('Kangaroo3', 'East Wing', 10, 5, 8);
END;
/
*/
CREATE OR REPLACE PROCEDURE addEmployeeQualification(emp_id IN INTEGER, qual_id IN INTEGER) AS
    insertion_err EXCEPTION;
BEGIN
    INSERT INTO
        EMPLOYEE_QUALIFICATION (EMPLOYEE_ID, DESCRIPTION)
    VALUES
        (emp_id, qual_id);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END InsertEmpQual;
/
CREATE
OR REPLACE PROCEDURE generateAttendance (
    classID INTEGER,
    staffArray STAFF_NAMES,
    childArray CHILD_NAMES,
    classStart VARCHAR2,
    classEnd VARCHAR2
) AS
    class_id INTEGER;
    startTime DATE;
    endTime DATE;
BEGIN
    -- Parse date strings to date obj
    startTime := to_date(classStart, 'DD-MM-YYYY HH:MI PM');
    endTime := to_date(classEnd, 'DD-MM-YYYY HH:MI PM');

    -- create entry in child attendance for attending children
    FOR i IN 1..childArray.COUNT LOOP
        DECLARE
            i_child_id INTEGER;
        BEGIN
            -- Look up the primary key (person_id) for the name
            SELECT CHILD_ID INTO i_child_id
            FROM CHILD
            WHERE (first_name || ' ' || last_name) = childArray(i);

            -- Insert into the attendance table
            INSERT INTO "CHILD_ATTENDANCE" (CHILD_ID, CLASS_ID, ARRIVAL, DEPARTURE) 
            VALUES (i_child_id, classID, startTime, endTime);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Child ' || childArray(i) || ' not found.');
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        END;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Child Attendance added successfully.');

    -- create entry in staff attendance for attending staff
    FOR i IN 1..staffArray.COUNT LOOP
        DECLARE
            i_staff_id INTEGER;
        BEGIN
            -- Look up the primary key (person_id) for the name
            SELECT EMPLOYEE_ID INTO i_staff_id
            FROM EMPLOYEE
            WHERE (first_name || ' ' || last_name) = staffArray(i);

            -- Insert into the attendance table
            INSERT INTO "EMPLOYEE_ATTENDANCE" (EMPLOYEE_ID, CLASS_ID, ARRIVAL, DEPARTURE) 
            VALUES (i_staff_id, classID, startTime, endTime);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('Child ' || staffArray(i) || ' not found.');
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        END;
    END LOOP;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Staff Attendance added successfully.');


END generateAttendance;
/
-- Implementation Examples
/*
BEGIN
    generateAttendance(0, STAFF_NAMES('John Apple'), CHILD_NAMES('Joe Vanderburg', 'Holly Prior', 'Tom Greenhill'), '01-01-2024 1:02 PM', '01-01-2024 3:01 PM');
END;
/
*/
CREATE OR REPLACE PROCEDURE InsertQual(qualification_desc IN VARCHAR2) AS
    non_unique EXCEPTION;
BEGIN
    INSERT INTO
        QUALIFICATION (DESCRIPTION)
    VALUES
        (qualification_desc);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END InsertQual;
/
